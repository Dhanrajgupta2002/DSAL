Experiment no.3 :Implement a graph data structure using adjacency list/matrix representation and
perform BFS and DFS on it.


(Make a separate tab for Adj_mat)


#include<iostream>
using namespace std;

void PrintMat(int mat[][20], int n)
{
	int i, j;
 	cout<<"\n\n"<<"";
	for(i = 0; i < n; i++)
	cout<<"("<<i+1<<")";
	cout<<"\n\n";
 	// Print 1 if the corresponding vertexes are connected otherwise 0.
	for(i = 0; i < n; i++)
	{
	cout<<"("<<i+1<<")";
		for(j = 0; j < n; j++)
		{
		cout<<mat[i][j];
		}
		cout<<"\n\n";
	}
}
 
int main()
{               int i, j, v;
 	cout<<"Enter the number of vertexes: ";
	cin>>v;
 	int  mat[20][20];
 	cout<<"\n";
	// Take input of the adjacency of each pair of vertexes.
	for(i = 0; i < v; i++)
	{for(j = i; j < v; j++)
		{
			if(i != j)
			{
			cout<<"Enter 1 if the vertex "<<i+1<<" is adjacent to "<<j+1<<", otherwise 0: ";
	cin>>mat[i][j];
 	mat[j][i] = mat[i][j];
	}
	else
	mat[i][j] = 0;
		}
	}
 
	PrintMat(mat, v);
}


( Make a separate tab for ADJA_LI )

#include<iostream>
using namespace std;
struct node
{
    int vertex;
    struct node *next;
}*adj_list[10];
void read_graph(struct node *adj_list[10]) {
    int i, j,n;
    char reply;
    struct node *p, *c;
    cout << "\n How Many Vertices ? : ";
    cin >> n;
      for (i = 1; i <= n; i++)
        adj_list[i] = NULL;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            if (i == j)
                continue;
            cout << "\n Vertices " << i << " & " << j << " are Adjacent ? (Y/N) :";
            cin >> reply;
            if (reply == 'y' || reply == 'Y') {
                c = new node;
                c->vertex = j;
                c->next = NULL;
                if (adj_list[i] == NULL)
                    adj_list[i] = c;
                else {
                    p = adj_list[i];
                    while (p->next != NULL)
                        p = p->next;
                   
                }
            }
        }
    }
}

int main()
{
    read_graph(adj_list);
    return 0;
}

( make a separate tab for the traversal )

#include<iostream>
#include<stack>
#include<queue>
using namespace std;

struct node {
    int vertex;
    node *next;
}*adj_list[10];

class Graph {
private:
    int n;
public:
    stack<int> s;
    queue<int> q;
    void read_graph(struct node *adj_list[10], int n);
    void create();
    void dfs();
    void bfs();
};

void Graph::read_graph(struct node *adj_list[10], int n) {
    int i, j;
    char reply;
    struct node *p, *c;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            if (i == j)
                continue;
            cout << "\n Vertices " << i << " & " << j << " are Adjacent ? (Y/N) :";
            cin >> reply;
            if (reply == 'y' || reply == 'Y') {
                c = new node;
                c->vertex = j;
                c->next = NULL;
                if (adj_list[i] == NULL)
                    adj_list[i] = c;
                else {
                    p = adj_list[i];
                    while (p->next != NULL)
                        p = p->next;
                    p->next = c;
                }
            }
        }
    }
}

void Graph::create() {
    struct node *p;
    int deg, i;
    cout << "\n How Many Vertices ? : ";
    cin >> n;
    for (i = 1; i <= n; i++)
        adj_list[i] = NULL;
    read_graph(adj_list, n);
    cout << "\n Vertex \t Degree ";
    for (i = 1; i <= n; i++) {
        deg = 0;
        p = adj_list[i];
        while (p != NULL) {
            deg++;
            p = p->next;
        }
        cout << "\n\n" << i << "\t\t" << deg << "\n\n";
    }
}

void Graph::dfs() {
    int sv, num;
    node *t;
    cout << "Enter starting vertex: ";
    cin >> sv;
    int visited[10] = {0};
    s.push(sv);
    while (!s.empty()) {
        num = s.top();
        s.pop();
        if (visited[num] == 0) {
            cout << num << " ";
            visited[num] = 1;
        }
        t = adj_list[num];
        while (t != NULL) {
            if (visited[t->vertex] == 0)
                s.push(t->vertex);
            t = t->next;
        }
    }
    cout << endl;
}

void Graph::bfs() {
    int sv, num;
    node *t;
    cout << "Enter starting vertex: ";
    cin >> sv;
    int visited[10] = {0};
    q.push(sv);
    while (!q.empty()) {
        num = q.front();
        q.pop();
        if (visited[num] == 0) {
            cout << num << " ";
            visited[num] = 1;
        }
        t = adj_list[num];
        while (t != NULL) {
            if (visited[t->vertex] == 0)
                q.push(t->vertex);
            t = t->next;
        }
    }
    cout << endl;
}

int main() {
    Graph obj;
    obj.create();
    cout << "DFS Traversal: ";
    obj.dfs();
    cout << "BFS Traversal: ";
    obj.bfs();
    return 0;
}
